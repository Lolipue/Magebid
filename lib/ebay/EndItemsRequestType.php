<?php
// autogenerated file 04.06.2009 09:55
// $Id: $
// $Log: $
//
//
require_once 'EndItemRequestContainerType.php';
require_once 'AbstractRequestType.php';

/**
 * Ends the specified item listings before the date and time at whichit would 
 * normally end (per the listing duration). As many as ten (10) listings can be 
 * ended per request.<br><br>For competitive-bidding listings that have bids on 
 * them, you must specify anEndingReason value. If you specify SellToHighBidder, 
 * the listing ends as asuccessful auction with winning bidder(s). Otherwise, all 
 * bids are cancelledbefore the item is ended.<br><br>There are two restrictions 
 * for ending items early in the last 12 hours of alisting. If there is a qualified 
 * bid (i.e., current high bid that, whenapplicable, meets the minimum reserve 
 * price) in the last 12 hours of a listing,the seller cannot end the item early. 
 * If the seller has cancelled a bid in thelast 12 hours of the listing, the seller 
 * cannot end the item early.<br><br>Only the item's seller can use EndItems to end 
 * an item listings. 
 *
 * @link http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/types/EndItemsRequestType.html
 *
 */
class EndItemsRequestType extends AbstractRequestType
{
	/**
	 * @var EndItemRequestContainerType
	 */
	protected $EndItemRequestContainer;

	/**
	 * @return EndItemRequestContainerType
	 * @param integer $index 
	 */
	function getEndItemRequestContainer($index = null)
	{
		if ($index !== null) {
			return $this->EndItemRequestContainer[$index];
		} else {
			return $this->EndItemRequestContainer;
		}
	}
	/**
	 * @return void
	 * @param EndItemRequestContainerType $value 
	 * @param  $index 
	 */
	function setEndItemRequestContainer($value, $index = null)
	{
		if ($index !== null) {
			$this->EndItemRequestContainer[$index] = $value;
		} else {
			$this->EndItemRequestContainer = $value;
		}
	}
	/**
	 * @return void
	 * @param EndItemRequestContainerType $value 
	 */
	function addEndItemRequestContainer($value)
	{
		$this->EndItemRequestContainer[] = $value;
	}
	/**
	 * @return 
	 */
	function __construct()
	{
		parent::__construct('EndItemsRequestType', 'urn:ebay:apis:eBLBaseComponents');
		if (!isset(self::$_elements[__CLASS__]))
				self::$_elements[__CLASS__] = array_merge(self::$_elements[get_parent_class()],
				array(
					'EndItemRequestContainer' =>
					array(
						'required' => false,
						'type' => 'EndItemRequestContainerType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => true,
						'cardinality' => '0..*'
					)
				));
	}
}
?>
