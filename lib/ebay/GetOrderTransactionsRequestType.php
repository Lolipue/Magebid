<?php
// autogenerated file 04.06.2009 09:55
// $Id: $
// $Log: $
//
//
require_once 'TransactionPlatformCodeType.php';
require_once 'ItemTransactionIDArrayType.php';
require_once 'OrderIDArrayType.php';
require_once 'AbstractRequestType.php';

/**
 * Retrieves information about one or more orders or one or more transactions (or 
 * both). Ifyou have both orderIDs and itemIDs/transactionIDs, you may find this 
 * "combined call" moreconvenient than calling GetOrders and GetItemTransactions 
 * separately. Note that everytransaction is nested within an Order node, even if 
 * the transaction does not belong to anorder.<br> <br>Note: OrderID is not 
 * returned when the GetOrderTransactions request includesItemTransactionID, even 
 * if the transaction is part of an order. To get the OrderID fora transaction, 
 * call GetItemTransaction with IncludeContainingOrder = true. 
 *
 * @link http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/types/GetOrderTransactionsRequestType.html
 *
 */
class GetOrderTransactionsRequestType extends AbstractRequestType
{
	/**
	 * @var ItemTransactionIDArrayType
	 */
	protected $ItemTransactionIDArray;
	/**
	 * @var OrderIDArrayType
	 */
	protected $OrderIDArray;
	/**
	 * @var TransactionPlatformCodeType
	 */
	protected $Platform;
	/**
	 * @var boolean
	 */
	protected $IncludeFinalValueFees;

	/**
	 * @return ItemTransactionIDArrayType
	 */
	function getItemTransactionIDArray()
	{
		return $this->ItemTransactionIDArray;
	}
	/**
	 * @return void
	 * @param ItemTransactionIDArrayType $value 
	 */
	function setItemTransactionIDArray($value)
	{
		$this->ItemTransactionIDArray = $value;
	}
	/**
	 * @return OrderIDArrayType
	 */
	function getOrderIDArray()
	{
		return $this->OrderIDArray;
	}
	/**
	 * @return void
	 * @param OrderIDArrayType $value 
	 */
	function setOrderIDArray($value)
	{
		$this->OrderIDArray = $value;
	}
	/**
	 * @return TransactionPlatformCodeType
	 */
	function getPlatform()
	{
		return $this->Platform;
	}
	/**
	 * @return void
	 * @param TransactionPlatformCodeType $value 
	 */
	function setPlatform($value)
	{
		$this->Platform = $value;
	}
	/**
	 * @return boolean
	 */
	function getIncludeFinalValueFees()
	{
		return $this->IncludeFinalValueFees;
	}
	/**
	 * @return void
	 * @param boolean $value 
	 */
	function setIncludeFinalValueFees($value)
	{
		$this->IncludeFinalValueFees = $value;
	}
	/**
	 * @return 
	 */
	function __construct()
	{
		parent::__construct('GetOrderTransactionsRequestType', 'urn:ebay:apis:eBLBaseComponents');
		if (!isset(self::$_elements[__CLASS__]))
				self::$_elements[__CLASS__] = array_merge(self::$_elements[get_parent_class()],
				array(
					'ItemTransactionIDArray' =>
					array(
						'required' => false,
						'type' => 'ItemTransactionIDArrayType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'OrderIDArray' =>
					array(
						'required' => false,
						'type' => 'OrderIDArrayType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'Platform' =>
					array(
						'required' => false,
						'type' => 'TransactionPlatformCodeType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'IncludeFinalValueFees' =>
					array(
						'required' => false,
						'type' => 'boolean',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					)
				));
	}
}
?>
